% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/general_tools.R
\name{replace_internal_ids_with_external}
\alias{replace_internal_ids_with_external}
\title{Replace Internal IDs with External IDs}
\usage{
replace_internal_ids_with_external(
  internal_table,
  internal_id_column,
  id_mapping_table,
  external_id_column,
  new_column_name = internal_id_column
)
}
\arguments{
\item{internal_table}{A data frame that contains the internal IDs you want to replace.}

\item{internal_id_column}{A string. The name of the column in \code{internal_table}
that holds the internal IDs. This column will be used as the join key.}

\item{id_mapping_table}{A data frame that serves as the mapping between
internal and external IDs. It must contain a column named \code{id} (for internal IDs)
and a column specified by \code{external_id_column}.}

\item{external_id_column}{A string. The name of the column in \code{id_mapping_table}
that holds the external IDs.}

\item{new_column_name}{A string. The desired name for the column containing
the external IDs in the output table. Defaults to \code{internal_id_column},
which means the original internal ID column will be overwritten.}
}
\value{
A data frame similar to \code{internal_table}, but with the specified
internal ID column replaced by or augmented with the corresponding external IDs.
If an internal ID does not have a match in the mapping table, the external ID
will be \code{NA}.
}
\description{
This function takes a table containing internal IDs and replaces them (or
adds a new column with) corresponding external IDs by joining with a
separate ID mapping table.
}
\examples{
\dontrun{
  internal_data <- data.frame(
    user_id = c(1, 2, 3, 4),
    value = c("A", "B", "C", "D")
  )

  id_map <- data.frame(
    id = c(1, 2, 3, 5),
    external_user_id = c("ext_A", "ext_B", "ext_C", "ext_E")
  )

  # Overwrite the 'user_id' column with external IDs
  result_overwrite <- replace_internal_ids_with_external(
    internal_table = internal_data,
    internal_id_column = "user_id",
    id_mapping_table = id_map,
    external_id_column = "external_user_id"
  )
  print(result_overwrite)

  # Create a new column named 'new_external_id'
  result_new_column <- replace_internal_ids_with_external(
    internal_table = internal_data,
    internal_id_column = "user_id",
    id_mapping_table = id_map,
    external_id_column = "external_user_id",
    new_column_name = "new_external_id"
  )
  print(result_new_column)
}
}
